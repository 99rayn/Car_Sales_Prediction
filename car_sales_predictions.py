# -*- coding: utf-8 -*-
"""Car_Sales_Predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IcTDCRd-ok4MAss7zG-2Fr6bBmezX40k

**Importing Libraries **
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Uploading Local File**"""

df = pd.read_csv('/content/car sales.csv')
df.head()

"""**1.	Top-Selling Models by Volume and Revenue..**"""

#top selling car models by volume
top_selling_models = df['Model'].value_counts().head(10)
print("Top 10 models by volume: \n", top_selling_models)

#top selling car models by revenue

top_selling_revenue = df.groupby('Model')["Price"].sum().sort_values(ascending=False).head(10)
print("\nTop 10 models by revenue: \n", top_selling_revenue)

"""**Sales Trends (Monthly)**"""

#Converting Date_ column to Datetime Format
df['Date_'] = pd.to_datetime(df['Date_'])

#extract Months
df["Months"] = df["Date_"].dt.to_period("M")

#Aggregating Monthly Sales

monthly_sales = df.groupby("Months")["Price"].sum()

print("Monthly Sales: \n ",monthly_sales.head())

print("\n Monthly Sales: \n ",monthly_sales.tail())

"""**Dealer Regions with the Highest Sales**"""

sales_by_region = df.groupby("Dealer_Region")["Price"].sum().sort_values(ascending=False).head(10)

print("Dealer Rehion By Sales: \n", sales_by_region)

"""**Demographic Characteristics of Customers**"""

#customer gender distribution
gender_distribution = df["Gender"].value_counts()

#Cutomers annual slary distribution

annual_slary_distribution = df["Annual_Income"].describe()

print("Gender Distribution: \n", gender_distribution)
print("\nAnnual Salary Distribution: \n", annual_slary_distribution)

"""** How Income Levels Influence Car Model Preferences**"""

#average income by car model

income_by_model = df.groupby("Model")["Annual_Income"].mean().sort_values(ascending=False).head(10)

print("Income Level by Model: \n", income_by_model)

"""**Most Popular Car Colors and Body Styles**"""

#most popular car color
popular_color = df["Color"].value_counts().head(10)

#most popular car body style
popular_body_style = df["Body_Style"].value_counts().head(10)

print("Most Popular Car Color: \n", popular_color)
print("\nMost Popular Car Body Style: \n", popular_body_style)

"""**Dealers with the Highest Sales and Revenue**"""

#highest sales dealer
top_dealers = df['Dealer_Name'].value_counts().head(10)


#highest revenue
top_revenue = df.groupby('Dealer_Name')["Price"].sum().sort_values(ascending=False).head(10)

print("Top Dealers by Sales: \n", top_dealers)
print("\nTop Dealers by Revenue: \n", top_revenue)

"""**Sales Performance Across Regions**"""

#top Regions
top_regions = df["Dealer_Region"].value_counts()

print("Top Regions: \n", top_regions)

#sales by region

sales_by_region = df.groupby("Dealer_Region")["Price"].sum().sort_values(ascending=False).head()

print("\nSales by Region: \n", sales_by_region)

"""**Average and Median Prices by Model, Company, and Region**"""

#average and Median By Model
average_median_model = df.groupby("Model")["Price"].agg(["mean","median"]).sort_values(by="mean",ascending=False).head(5)

#average and Median By Company
average_median_comapny = df.groupby("Company")["Price"].agg(["mean","median"]).sort_values(by="mean",ascending=False).head(5)

#average and Median By Region
average_median_region = df.groupby("Dealer_Region")["Price"].agg(["mean","median"]).sort_values(by="mean",ascending=False).head(5)


print("Average and Median By Model: \n", average_median_model)
print("\nAverage and Median By Company: \n", average_median_model)
print("\nAverage and Median By Region: \n", average_median_model)

"""**Impact of Engine Types and Transmissions on Selling Price**"""

#impact by engine

engine_impact = df.groupby("Engine_name")["Price"].sum().sort_values(ascending=False).head(5)

#impact by transmission

transmission_impact = df.groupby("Transmission")["Price"].sum().sort_values(ascending=False).head(5)

print("Impact by Engine: \n", engine_impact)
print("\nImpact by Transmission: \n", transmission_impact)

"""**Seasonality in Sales by Region**"""

df["Months"] = df["Date_"].dt.month_name()

#seasonal sales by region

seasonal_sale_region = df.groupby(["Dealer_Region","Months"])["Price"].sum().sort_values(ascending=False).head(10)

print("Seasonal Sales by Region: \n", seasonal_sale_region)